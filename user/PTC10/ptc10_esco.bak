"""
    this is a PTC10 plan with esco pump support
    reload by
    # %run -im user.ptc10_esco
"""

import logging

logger = logging.getLogger(__name__)
logger.info(__file__)

from bluesky import plan_stubs as bps
import time

from instrument.devices.ptc10_controller import ptc10
from instrument.plans import SAXS, USAXSscan, WAXS
from instrument.plans import before_command_list, after_command_list
from ophyd import Component, Device, EpicsSignal, EpicsSignalRO
from ophyd import Signal
import time

#define conversions from seconds
SECOND = 1
MINUTE = 60 * SECOND
HOUR = 60 * MINUTE
DAY = 24 * HOUR
WEEK = 7 * DAY
#debug mode switch, may not be that useful in our case...
esco_debug = Signal(name="esco_debug", value=False)
#   In order to run as debug (without collecting data, only control pump) in command line run:
#esco_debug.put(True)
# utility functions to use in heater

def setheaterOff():
    """
    switches heater off
    """
    yield from bps.mv(
        ptc10.enable, "Off",                            #power down
        ptc10.pid.pidmode, "Off"                        #Stop pid loop also
    )


def setheaterOn():
    """
    switches heater on
    """
    yield from bps.mv(
        ptc10.enable, "On",                            #power up
        ptc10.pid.pidmode, "On"                        #Start pid loop also
    )


#define device. Only Pressure target, Pressure readback, and on/off needed.
class EscoPumpDev(Device):
    Pressure = Component(EpicsSignal, "PressureSP")
    PressureRBV = Component(EpicsSignalRO, "Pressure_RBV")
    #Refill = Component(EpicsSignal, "Refill")
    StartStop = Component(EpicsSignal, "Run", kind="omitted")

#should this be here or on line 95?
# create the Python object:
escoPump = EscoPumpDev("9idcSP:A:", name="escoPump")

# user can change this list of pressures
# Override this list using 'p_list=[]' keyword argument below.
PressureList = [1000,1500,2000,2500,
    3000,3500,3750,3500,3000,2500,
    2000,1500,1000]

#this is the function we will run:

def myEscoPlan(pos_X, pos_Y, thickness, scan_title, delay_minutes=10, p_list=None, md={}):
    """
    Collect USAXS/SAXS/WAXS data in steps in pressure

    0. Atmospheric pressure start, collect data
    1. Increase pressure in steps, wait for defined time while collecting data
    2. Cycle through list of pressures
    3. Finish.

    reload by::

        %run -im user.esco_pump
    """
    #parameters definitions
    pressure_list = p_list or PressureList
    delayAtPressureinMin = delay_minutes
    #print(f"{pressure_list=}")
    #print(f"{delayAtPressureinMin=}")

    def getSampleName():
        return (
            f"{scan_title}"
            f"_{escoPump.PressureRBV.get():.0f}PSI"
            f"_{(time.time()-t0)/60:.0f}min"
        )

    def collectAllThree(debug=False):
        sampleMod = getSampleName()
        if debug:
            #for testing purposes, set debug=True
            print(sampleMod)
            yield from bps.sleep(10)
        else:
            md["title"]=sampleMod
            yield from USAXSscan(pos_X, pos_Y, thickness, sampleMod, md={})
            sampleMod = getSampleName()
            md["title"]=sampleMod
            yield from SAXS(pos_X, pos_Y, thickness, sampleMod, md={})
            sampleMod = getSampleName()
            md["title"]=sampleMod
            yield from WAXS(pos_X, pos_Y, thickness, sampleMod, md={})

    #logger.info(f"Linkam controller PV prefix={linkam.prefix}")
    isDebugMode = esco_debug.get()

    if isDebugMode is not True:
        yield from before_command_list()                #this will run usual startup scripts for scans

    # Collect data at at conditions we are in now (atmospheric pressure?).
    t0 = time.time()                                         # mark start time of data collection.
    yield from collectAllThree(isDebugMode)

    # yield from bps.mv(escoPump.StartStop, 1)               # start the pump if it is running

    def _ramp_and_hold_measurement(pr):
        #print(f"{pr=}")
        yield from bps.mv(escoPump.Pressure, pr)             # next pressure
        #print("after put(pr)")
        logger.info("Ramping pressure to %s PSI, collecting data", pr)        # for the log file
        checkpoint = time.time() + delayAtPressureinMin*MINUTE          # time to end  after``delayAtPressureinMin`` hold period
        #print(f"{checkpoint=}")
        yield from preUSAXStune()
        #print(f"{(checkpoint-time.time())=}")
        while time.time() < checkpoint:                      # just wait...
            yield from collectAllThree(isDebugMode)          # USAXS, SAXS, WAXS

    #print("Starting pressure_list series...")
    for pr in pressure_list:
        #logger.info("Pressure selected %s", pr)
        yield from _ramp_and_hold_measurement(pr)

    logger.info(f"finished")                            #record end.

    if isDebugMode is not True:
       yield from after_command_list()                  # runs standard after scan scripts.





def myPTC10Loop(pos_X, pos_Y, thickness, scan_title, delaySec, md={}):
    """
    Collect USAXS/SAXS/WAXS for time delaySec
    Append to name time and temperature.
    PTC10 control is left to manual by user.
    To run example:
    RE(myPTC10Loop(0,0,1.28,"testExp",60*60*2))
    this will run sample in sx= 0, sy=0, thickness=1.28mm for 2 hours.
    Sample names will look similar to :  testExp_120C_25min

    reload by
    # %run -im user.ptc10_plan
    """

    def getSampleName():
        """
        return the name of the sample
        """
        return f"{scan_title}_{ptc10.position:.0f}C_{(time.time()-t0)/60:.0f}min"

    def collectAllThree(debug=False):
        """
        documentation here
        """
        sampleMod = getSampleName()
        if debug:
            #for testing purposes, set debug=True
            print(sampleMod)
            yield from bps.sleep(20)
        else:
            md["title"]=sampleMod
            yield from USAXSscan(pos_X, pos_Y, thickness, sampleMod, md={})
            sampleMod = getSampleName()
            md["title"]=sampleMod
            yield from SAXS(pos_X, pos_Y, thickness, sampleMod, md={})
            sampleMod = getSampleName()
            md["title"]=sampleMod
            yield from WAXS(pos_X, pos_Y, thickness, sampleMod, md={})

    yield from before_command_list()                #this will run usual startup scripts for scans

    t0 = time.time()

    logger.info("Collecting data for %s sec",delaySec)

    while time.time()-t0 < delaySec:                          # collects data for delay1 seconds
        yield from collectAllThree()

    logger.info(f"finished")

    yield from after_command_list()                  # runs standard after scan scripts.


def myPTC10Plan(pos_X, pos_Y, thickness, scan_title, temp1, rate1, delay1, temp2, rate2, md={}):
    """
    collect RT USAXS/SAXS/WAXS - or not, change code
    change temperature T to temp1 with rate1
    collect USAXS/SAXS/WAXS while heating or sleep= change code...
    when temp1 reached, hold for delay1 seconds, collecting data repeatedly
    change T to temp2 with rate2
    collect USAXS/SAXS/WAXS while changing temp
    when temp2 reached collect final data
    and it will end here...

    reload by
    # %run -i ptc10_local
    """
    def getSampleName():
        """
        return the name of the sample
        """
        return f"{scan_title}_{ptc10.position:.0f}C_{(time.time()-t0)/60:.0f}min"

    def collectAllThree(debug=False):
        """
        documentation here
        """
        sampleMod = getSampleName()
        if debug:
            #for testing purposes, set debug=True
            print(sampleMod)
            yield from bps.sleep(20)
        else:
            md["title"]=sampleMod
            yield from USAXSscan(pos_X, pos_Y, thickness, sampleMod, md={})
            sampleMod = getSampleName()
            md["title"]=sampleMod
            yield from SAXS(pos_X, pos_Y, thickness, sampleMod, md={})
            sampleMod = getSampleName()
            md["title"]=sampleMod
            yield from WAXS(pos_X, pos_Y, thickness, sampleMod, md={})

    yield from before_command_list()                #this will run usual startup scripts for scans
    t0 = time.time()
    yield from collectAllThree()                    #collect RT data

    yield from bps.mv(ptc10.ramp, 30/60.0)           # user wants C/min, controller wants C/s
    yield from bps.mv(ptc10.temperature.setpoint, temp1)                #Change the temperature and not wait
    yield from setheaterOn()

    logger.info(f"Ramping temperature to {temp1} C")

    while not ptc10.temperature.inposition:                      #runs data collection until next temp or sleeps. Change as needed.
        yield from bps.sleep(5)
        logger.info(f"Still Ramping temperature to {temp1} C")
        #yield from collectAllThree()

    #logger.info("Reached temperature, now collecting data for %s minutes", delay1min)
    logger.info("Reached temperature, now collecting data for %s seconds", delay1)
    t1 = time.time()

    while time.time()-t1 < delay1:                          # collects data for delay1 seconds
        #yield from bps.sleep(5)
        logger.info(f"Collecting data for %s ",delay1)
        yield from collectAllThree()

    logger.info("waited for %s seconds, now changing temperature to %s C", delay1, temp2)

    yield from bps.mv(ptc10.ramp, rate2/60.0)                  #sets the rate of next ramp
    yield from bps.mv(ptc10.temperature, temp2)                #Change the temperature and wait to get there

    logger.info(f"reached {temp2} C")
    yield from setheaterOff()

    yield from after_command_list()                  # runs standard after scan scripts.

    logger.info(f"finished")
